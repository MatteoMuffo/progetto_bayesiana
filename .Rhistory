install.packages("RANN")
library(RANN)
library(geohashr)
install.packages("geohashr")
devtools::install_github("ironholds/geohash")
install.packages("devtools")
devtools::install_github("ironholds/geohash")
install.packages("geohash")
install.packages("Rcpp")
install.packages("geohash")
install.packages("R.Doy")
install.packages("geohash"
)
install.packages("geohash")
install_github('andreacirilloac/updateR')
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
library("updateR")
88.29*117324
library(ggmap)
citation("ggmap")
clear()
library('timeDate') # date and time
# general visualisation
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
library('timeDate') # date and time
install.packages("timeDate")
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
install.packages("corrplot")
library('dplyr') # data manipulation
library('readr') # input/output
install.packages("readr")
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
install.packages("tidyr")
install.packages("tidyr")
library('tidyr') # data wrangling
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
install.packages(forcats)
install.packages("forcats")
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
install.packages("ggfortify")
install.packages("ggrepel")
install.packages("treemapify")
library('treemapify') # visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation
library('ggforce') # visualisation
install.packages("ggforce")
library('broom') # data wrangling
install.packages("broom")
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
install.packages("lubridate")
library('lubridate') # date and time
library('timeDate') # date and time
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation ----- not available for my R version (3.3.3)
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
library('timeDate') # date and time
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation ----- not available for my R version (3.3.3)
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
library('timeDate') # date and time
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation ----- not available for my R version (3.3.3)
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
library('timeDate') # date and time
system('clang++ -v')
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat("\nCC=clang", "CXX=clang++ -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
cat(M)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
# Load the library
library(rstan)   # to interface R with STAN
knitr::opts_chunk$set(echo = FALSE)
## define base for the graphs and store in object 'p'
p6 <- ggplot(data = Gdata[!is.na(Rim_area) & !is.na(RNFL_average),], aes(x = Rim_area, y = RNFL_average, color= factor(Patient) )  )
library(ggplot2)
## define base for the graphs and store in object 'p'
p5 <- ggplot(data = Gdata[!is.na(PSD) & !is.na(RNFL_average),], aes(x = PSD, y = RNFL_average,  color= factor(Patient) )  )
knitr::opts_chunk$set(echo = FALSE)
setwd("~/Documents/universita/bayesian_statistics-Guglielmi/GLAUCOMA_PROJECT/src/analisi_exp_markdown/")
Gdata=read.table("../../data/data.csv", header=T,fill=T,sep=",")
10/27*100
(27-10)/27*100
(68-15)/68*100
(12-8)/12*100
(60-25)/60*100
(30-17.5)/30
setwd("~/Documents/universita/bayesian_statistics-Guglielmi/GLAUCOMA_PROJECT/src")
rm(list=ls())
load("../R_object/Glaucoma_better_data.RData")
rm(list=ls())
load("../R_object/Glaucoma_better_data.RData")
attach(mydata)
p <- ggplot(data = mydata, aes(x = visit2, y = MD,  color=factor(Patient) )  )
library(ggplot2)
p <- ggplot(data = mydata, aes(x = visit2, y = MD,  color=factor(Patient) )  )
p + geom_line() + geom_point() +
p + geom_line() + geom_point() +
p + geom_line() + geom_point()
p + geom_line() + geom_point()
p <- ggplot(data = mydata, aes(x = visit2, y = AGIS,  color=factor(Patient) )  )
p + geom_line() + geom_point()
p <- ggplot(data = mydata, aes(x = visit2, y = AEG,  color=factor(Patient) )  )
p + geom_line() + geom_point()
p <- ggplot(data = mydata, aes(x = visit2, y = AGIS,  color=factor(Patient) )  )
p + geom_line() + geom_point()
p <- ggplot(data = mydata, aes(x = visit2, y = AGIS_score,  color=factor(Patient) )  )
p + geom_line() + geom_point()
p <- ggplot(data = mydata, aes(x = RNFL_average, y = MD,  color=factor(Patient) )  )
p + geom_line() + geom_point()
p <- ggplot(data = mydata, aes(x = Progression1, y = MD,  color=factor(Patient) )  )
p + geom_line() + geom_point()
p <- ggplot(data = mydata, aes(x = Progression1, y = RNFL_average,  color=factor(Patient) )  )
p + geom_line() + geom_point()
p <- ggplot(data = mydata, aes(x = MD, y = RNFL_average,  color=factor(Patient) )  )
p + geom_line() + geom_point()
rm(list=ls())
load("../R_object/Glaucoma_better_data.RData")
attach(mydata)
data=list( y=RNFL_average, Z=Z, npat= length(unique(Patient)), nrow_b=dim(Z)[2],
mu0=mu0, S0=S0, b0=b0, R=R, p=p, numerosity = numerosity, kk=kk)      # dati che passo a jags
rm(list=ls())
load("../R_object/Glaucoma_better_data.RData")
attach(mydata)
################JAGGAMENTO#######################
library(rjags)
# Compute useful values
numerosity<-as.integer(table(Patient))
kk=rep(0,length(unique(Patient)))
kk[1]=0
for (i in 2:length(unique(Patient))){
kk[i]=kk[i-1]+numerosity[i-1]
}
#covariates with random coefficents
Z=cbind(
rep(1,length(Patient)),  #b1 (intercept)
visit2                   #b2
)
# Hyperparameters:
b0=rep(0,dim(Z)[2])
R=diag(rep(1, dim(Z)[2]))
p=dim(Z)[2]
data=list( y=RNFL_average, Z=Z, npat= length(unique(Patient)), nrow_b=dim(Z)[2],
mu0=mu0, S0=S0, b0=b0, R=R, p=p, numerosity = numerosity, kk=kk)      # dati che passo a jags
data=list( y=RNFL_average, Z=Z, npat= length(unique(Patient)), nrow_b=dim(Z)[2],
S0=S0, b0=b0, R=R, p=p, numerosity = numerosity, kk=kk)      # dati che passo a jags
data=list( y=RNFL_average, Z=Z, npat= length(unique(Patient)), nrow_b=dim(Z)[2],
b0=b0, R=R, p=p, numerosity = numerosity, kk=kk)      # dati che passo a jags
#random coefficients initialization (row_i= coefficients b_i):
b= matrix(0,nrow=dim(Z)[2], ncol=length(unique(Patient)))
invD=p*solve(R)
rm(list=ls())
load("../R_object/Glaucoma_better_data.RData")
attach(mydata)
################JAGGAMENTO#######################
library(rjags)
# Compute useful values
numerosity<-as.integer(table(Patient))
kk=rep(0,length(unique(Patient)))
kk[1]=0
for (i in 2:length(unique(Patient))){
kk[i]=kk[i-1]+numerosity[i-1]
}
#covariates with random coefficents
Z=cbind(
rep(1,length(Patient)),  #b1 (intercept)
visit2                   #b2
)
# Hyperparameters:
b0=rep(0,dim(Z)[2])
R=diag(rep(1, dim(Z)[2]))
p=dim(Z)[2]
data=list( y=RNFL_average, Z=Z, npat= length(unique(Patient)), nrow_b=dim(Z)[2],
b0=b0, R=R, p=p, numerosity = numerosity, kk=kk)      # dati che passo a jags
#random coefficients initialization (row_i= coefficients b_i):
b= matrix(0,nrow=dim(Z)[2], ncol=length(unique(Patient)))
invD=p*solve(R)
inits = function() {list(b=b, invD=invD, sigma0=50)}
modelRegress=jags.model("data6_onlyrandom.bug",data=data,inits=inits,n.adapt=1000,n.chains=1)
update(modelRegress,n.iter=19000)
variable.names=c("b", "sigma0")
n.iter=50000
thin=10
library(coda)
library(plotrix)
outputRegress=coda.samples(model=modelRegress,variable.names=variable.names,n.iter=n.iter,thin=thin)
#outputRegress_mcmc <- as.mcmc(outputRegress)
data.out=as.matrix(outputRegress)
data.out=data.frame(data.out)
attach(data.out)
n.chain=dim(data.out)[1]
n.chain
library(ggplot2)
library(ggmcmc)
library(reshape)
# 90% CI random coefficients: random intercept
tmp=data.out[,grep("b.1.", names(data.out), fixed=TRUE)]
names(tmp)
b=tmp
tmp=melt(b)
head(tmp)
colnames(tmp) = c("Parameter", "value")
CI.b = apply(b, 2, quantile, c(0.05, 0.95))
CI.b
p=ggs_caterpillar(tmp, thick_ci = c(0.05, 0.95), thin_ci = c(0.025, 0.975))
p  + geom_vline(xintercept=0, col="orange")
# 90% CI random coefficients: macular volume
tmp=data.out[,grep("b.2.", names(data.out), fixed=TRUE)]
names(tmp)
b=tmp
tmp=melt(b)
head(tmp)
colnames(tmp) = c("Parameter", "value")
CI.b = apply(b, 2, quantile, c(0.05, 0.95))
CI.b
p=ggs_caterpillar(tmp, thick_ci = c(0.05, 0.95), thin_ci = c(0.025, 0.975))
p  + geom_vline(xintercept=0, col="orange")
save.image("../R_object/model_8.RData")
rm(list=ls())
graphics.off()
