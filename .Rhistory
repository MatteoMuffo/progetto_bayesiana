install.packages("RANN")
library(RANN)
library(geohashr)
install.packages("geohashr")
devtools::install_github("ironholds/geohash")
install.packages("devtools")
devtools::install_github("ironholds/geohash")
install.packages("geohash")
install.packages("Rcpp")
install.packages("geohash")
install.packages("R.Doy")
install.packages("geohash"
)
install.packages("geohash")
install_github('andreacirilloac/updateR')
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
library("updateR")
88.29*117324
library(ggmap)
citation("ggmap")
clear()
library('timeDate') # date and time
# general visualisation
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
library('timeDate') # date and time
install.packages("timeDate")
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
install.packages("corrplot")
library('dplyr') # data manipulation
library('readr') # input/output
install.packages("readr")
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
install.packages("tidyr")
install.packages("tidyr")
library('tidyr') # data wrangling
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
install.packages(forcats)
install.packages("forcats")
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
install.packages("ggfortify")
install.packages("ggrepel")
install.packages("treemapify")
library('treemapify') # visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation
library('ggforce') # visualisation
install.packages("ggforce")
library('broom') # data wrangling
install.packages("broom")
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
install.packages("lubridate")
library('lubridate') # date and time
library('timeDate') # date and time
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation ----- not available for my R version (3.3.3)
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
library('timeDate') # date and time
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation ----- not available for my R version (3.3.3)
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
library('timeDate') # date and time
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation ----- not available for my R version (3.3.3)
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
library('timeDate') # date and time
system('clang++ -v')
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat("\nCC=clang", "CXX=clang++ -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
cat(M)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
# Load the library
library(rstan)   # to interface R with STAN
knitr::opts_chunk$set(echo = FALSE)
## define base for the graphs and store in object 'p'
p6 <- ggplot(data = Gdata[!is.na(Rim_area) & !is.na(RNFL_average),], aes(x = Rim_area, y = RNFL_average, color= factor(Patient) )  )
library(ggplot2)
## define base for the graphs and store in object 'p'
p5 <- ggplot(data = Gdata[!is.na(PSD) & !is.na(RNFL_average),], aes(x = PSD, y = RNFL_average,  color= factor(Patient) )  )
knitr::opts_chunk$set(echo = FALSE)
setwd("~/Documents/universita/bayesian_statistics-Guglielmi/GLAUCOMA_PROJECT/src/analisi_exp_markdown/")
Gdata=read.table("../../data/data.csv", header=T,fill=T,sep=",")
10/27*100
(27-10)/27*100
(68-15)/68*100
(12-8)/12*100
(60-25)/60*100
(30-17.5)/30
28,26
target=113-6.5
target/11*3
(29.05*108-28.26*62)/(108-62)
(target_mean*108-28.26*62)/(108-62)
target_mean=29
(target_mean*108-28.26*62)/(108-62)
29*11/3
29*11/3+7
100+111
11
1
1
1
1
1
113-7
106/11*3
target_mean=28.90909
(target_mean*108-28.26*62)/(108-62)
105.5/11*3
target_mean=105.5/11*3
(target_mean*108-28.26*62)/(108-62)
(28*108-28.26*62)/(108-62)
28*11/3
+7
28*11/3+7
28.26*11/3
+7
28.26*11/3+7
28.26*11/3+75.9
28.26*11/3+5.9
109.5-6
103.6/11*3
104+5
104+5.5
104/11*3
28.36*11/3
+6
28.36*11/3+7
3.232/cos/(0.5222)
3.232/cos(0.5222)
qnorm(0.1106)
qnorm(2.27)
qnorm(0)
pnorm(0)
pnorm(2.27)
rm(list=ls())
load("../R_object/Glaucoma_better_data.RData")
attach(mydata)
################JAGGAMENTO#######################
library(rjags)
# Compute useful values
numerosity<-as.integer(table(Patient))
kk=rep(0,length(unique(Patient)))
kk[1]=0
for (i in 2:length(unique(Patient))){
kk[i]=kk[i-1]+numerosity[i-1]
}
#covariates with fixed coefficents
X=cbind(
rep(1,length(Patient)),  # b1 (intercept)
Black,               #beta2
#Hispanic,            #beta3
familiarity_yes,     #beta4
Sex,                 #beta5
#POAG,                #beta6
#Hypertension,        #beta7
#HyperLipidemia,      #beta8
#Cardiovascular_Dz,   #beta9
age65,               #beta10
#prostaglandin,       #beta11
brimonidine,         #beta12
#timolol,             #beta13
#IOP,                     #beta14
MD,                      #beta15
Vert_integrated_rim_area__vol_,     #beta17
Horz_integrated_rim_width__area_   #beta18
#Rim_area               #beta19
)
#covariates with random coefficents
Z=cbind(
rep(1,length(Patient)),  # b1 (intercept)
#macular_volume,          # b2
visit2                   # time
)
# Hyperparameters:
mu0=rep(0, dim(X)[2])
c=50
S0=c*solve(t(X)%*%X) # Zellner prior
b0=rep(0,dim(Z)[2])
R=diag(rep(1, dim(Z)[2]))
#p=dim(Z)[2]
#p=100
p=20
data=list( y=RNFL_average, X=X, Z=Z, npat= length(unique(Patient)), nrow_b=dim(Z)[2],
mu0=mu0, S0=S0, b0=b0, R=R, p=p, numerosity = numerosity, kk=kk)      # dati che passo a jags
#fixed coefficients initialization:
beta= rep(0,dim(X)[2])
#random coefficients initialization (row_i= coefficients b_i):
b= matrix(0,nrow=dim(Z)[2], ncol=length(unique(Patient)))
invD=p*solve(R)
inits = function() {list( beta=beta, b=b, invD=invD, sigma0=50,sigma1=50)}
modelRegress=jags.model("data4.bug",data=data,inits=inits,n.adapt=1000,n.chains=1)
update(modelRegress,n.iter=19000)
variable.names=c("beta", "b", "sigma0","sigma1","mu")
n.iter=130000
thin=40
library(coda)
library(plotrix)
outputRegress=coda.samples(model=modelRegress,variable.names=variable.names,n.iter=n.iter,thin=thin)
#outputRegress_mcmc <- as.mcmc(outputRegress)
data.out=as.matrix(outputRegress)
data.out=data.frame(data.out)
attach(data.out)
n.chain=dim(data.out)[1]
n.chain
#summary(data.out)
#head(data.out)
save.image("../R_object/model_14.RData")
setwd("~/")
rm(list=ls())
load("../R_object/Glaucoma_better_data.RData")
attach(mydata)
################JAGGAMENTO#######################
library(rjags)
# Compute useful values
numerosity<-as.integer(table(Patient))
kk=rep(0,length(unique(Patient)))
kk[1]=0
for (i in 2:length(unique(Patient))){
kk[i]=kk[i-1]+numerosity[i-1]
}
#covariates with fixed coefficents
X=cbind(
rep(1,length(Patient)),  # b1 (intercept)
Black,               #beta2
#Hispanic,            #beta3
familiarity_yes,     #beta4
Sex,                 #beta5
#POAG,                #beta6
#Hypertension,        #beta7
#HyperLipidemia,      #beta8
#Cardiovascular_Dz,   #beta9
age65,               #beta10
#prostaglandin,       #beta11
brimonidine,         #beta12
#timolol,             #beta13
#IOP,                     #beta14
MD,                      #beta15
Vert_integrated_rim_area__vol_,     #beta17
Horz_integrated_rim_width__area_   #beta18
#Rim_area               #beta19
)
#covariates with random coefficents
Z=cbind(
rep(1,length(Patient)),  # b1 (intercept)
#macular_volume,          # b2
visit2                   # time
)
# Hyperparameters:
mu0=rep(0, dim(X)[2])
c=50
S0=c*solve(t(X)%*%X) # Zellner prior
b0=rep(0,dim(Z)[2])
R=diag(rep(1, dim(Z)[2]))
#p=dim(Z)[2]
#p=100
p=20
data=list( y=RNFL_average, X=X, Z=Z, npat= length(unique(Patient)), nrow_b=dim(Z)[2],
mu0=mu0, S0=S0, b0=b0, R=R, p=p, numerosity = numerosity, kk=kk)      # dati che passo a jags
#fixed coefficients initialization:
beta= rep(0,dim(X)[2])
#random coefficients initialization (row_i= coefficients b_i):
b= matrix(0,nrow=dim(Z)[2], ncol=length(unique(Patient)))
invD=p*solve(R)
inits = function() {list( beta=beta, b=b, invD=invD, sigma0=50,sigma1=50)}
modelRegress=jags.model("data4.bug",data=data,inits=inits,n.adapt=1000,n.chains=1)
update(modelRegress,n.iter=19000)
variable.names=c("beta", "b", "sigma0","sigma1","mu")
n.iter=130000
thin=40
library(coda)
library(plotrix)
outputRegress=coda.samples(model=modelRegress,variable.names=variable.names,n.iter=n.iter,thin=thin)
#outputRegress_mcmc <- as.mcmc(outputRegress)
data.out=as.matrix(outputRegress)
data.out=data.frame(data.out)
attach(data.out)
n.chain=dim(data.out)[1]
n.chain
#summary(data.out)
#head(data.out)
save.image("../R_object/model_14.RData")
rm(list=ls())
load("../R_object/Glaucoma_better_data.RData")
rm(list=ls())
load("../R_object/Glaucoma_better_data.RData")
setwd("~/Documents/universita/bayesian_statistics-Guglielmi/GLAUCOMA_PROJECT/src")
rm(list=ls())
load("../R_object/Glaucoma_better_data.RData")
attach(mydata)
library(rjags)
# Compute useful values
numerosity<-as.integer(table(Patient))
kk=rep(0,length(unique(Patient)))
kk[1]=0
for (i in 2:length(unique(Patient))){
kk[i]=kk[i-1]+numerosity[i-1]
}
#covariates with fixed coefficents
X=cbind(
rep(1,length(Patient)),  # b1 (intercept)
Black,               #beta2
#Hispanic,            #beta3
familiarity_yes,     #beta4
Sex,                 #beta5
#POAG,                #beta6
#Hypertension,        #beta7
#HyperLipidemia,      #beta8
#Cardiovascular_Dz,   #beta9
age65,               #beta10
#prostaglandin,       #beta11
brimonidine,         #beta12
#timolol,             #beta13
#IOP,                     #beta14
MD,                      #beta15
Vert_integrated_rim_area__vol_,     #beta17
Horz_integrated_rim_width__area_   #beta18
#Rim_area               #beta19
)
#covariates with random coefficents
Z=cbind(
rep(1,length(Patient)),  # b1 (intercept)
#macular_volume,          # b2
visit2                   # time
)
# Hyperparameters:
mu0=rep(0, dim(X)[2])
c=50
S0=c*solve(t(X)%*%X) # Zellner prior
b0=rep(0,dim(Z)[2])
R=diag(rep(1, dim(Z)[2]))
#p=dim(Z)[2]
#p=100
p=20
data=list( y=RNFL_average, X=X, Z=Z, npat= length(unique(Patient)), nrow_b=dim(Z)[2],
mu0=mu0, S0=S0, b0=b0, R=R, p=p, numerosity = numerosity, kk=kk)      # dati che passo a jags
#fixed coefficients initialization:
beta= rep(0,dim(X)[2])
#random coefficients initialization (row_i= coefficients b_i):
b= matrix(0,nrow=dim(Z)[2], ncol=length(unique(Patient)))
invD=p*solve(R)
inits = function() {list( beta=beta, b=b, invD=invD, sigma0=50,sigma1=50)}
modelRegress=jags.model("data4.bug",data=data,inits=inits,n.adapt=1000,n.chains=1)
update(modelRegress,n.iter=19000)
variable.names=c("beta", "b", "sigma0","sigma1","mu")
n.iter=130000
thin=40
library(coda)
library(plotrix)
outputRegress=coda.samples(model=modelRegress,variable.names=variable.names,n.iter=n.iter,thin=thin)
#outputRegress_mcmc <- as.mcmc(outputRegress)
data.out=as.matrix(outputRegress)
data.out=data.frame(data.out)
attach(data.out)
n.chain=dim(data.out)[1]
n.chain
#summary(data.out)
#head(data.out)
save.image("../R_object/model_14.RData")
