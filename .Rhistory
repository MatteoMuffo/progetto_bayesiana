install.packages("RANN")
library(RANN)
library(geohashr)
install.packages("geohashr")
devtools::install_github("ironholds/geohash")
install.packages("devtools")
devtools::install_github("ironholds/geohash")
install.packages("geohash")
install.packages("Rcpp")
install.packages("geohash")
install.packages("R.Doy")
install.packages("geohash"
)
install.packages("geohash")
install_github('andreacirilloac/updateR')
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
library("updateR")
88.29*117324
library(ggmap)
citation("ggmap")
clear()
library('timeDate') # date and time
# general visualisation
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
library('timeDate') # date and time
install.packages("timeDate")
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
install.packages("corrplot")
library('dplyr') # data manipulation
library('readr') # input/output
install.packages("readr")
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
install.packages("tidyr")
install.packages("tidyr")
library('tidyr') # data wrangling
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
install.packages(forcats)
install.packages("forcats")
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
install.packages("ggfortify")
install.packages("ggrepel")
install.packages("treemapify")
library('treemapify') # visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation
library('ggforce') # visualisation
install.packages("ggforce")
library('broom') # data wrangling
install.packages("broom")
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
install.packages("lubridate")
library('lubridate') # date and time
library('timeDate') # date and time
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation ----- not available for my R version (3.3.3)
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
library('timeDate') # date and time
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation ----- not available for my R version (3.3.3)
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
library('timeDate') # date and time
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation ----- not available for my R version (3.3.3)
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
library('timeDate') # date and time
system('clang++ -v')
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat("\nCC=clang", "CXX=clang++ -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
cat(M)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
# Load the library
library(rstan)   # to interface R with STAN
setwd("~/Documents/universita/bayesian_statistics-Guglielmi/GLAUCOMA_PROJECT/src")
Gdata=read.table("../data/data.csv", header=T,fill=T,sep=",")
dim(Gdata)
attach(Gdata)
length(unique(Patient)) # 55 pazienti
length(Patient[Patient==0]) # c'Ã¨ un' osservazione strana, probabile errore
Gdata[ Patient==0,] # quasi tutto NA -> rimuoviamola per ora
Gdata=Gdata[ Patient!=0,]
library(ggplot2)
# patient
ggplot(data= Gdata, aes(factor(Patient), fill=1) ) +
geom_bar()+
theme(legend.position = "none", axis.text.x  = element_text(angle=90, hjust=1, vjust=0.9))
#numero visite per paziente:
N=mean(table(Patient))
N
quantile(table(Patient),0.25)
quantile(table(Patient),0.5)
quantile(table(Patient),0.75)
#female vs male
ggplot(data= Gdata, aes(Sex, fill=Sex  ) ) +
geom_bar()+
theme(legend.position = "none", axis.text.x  = element_text(angle=0, hjust=1, vjust=0.9))
# type of glaucoma
ggplot(data= Gdata, aes(Type_of_glaucoma, fill=Type_of_glaucoma  ) ) +
geom_bar()+
theme(legend.position = "none", axis.text.x  = element_text(angle=0.45, hjust=1, vjust=0.9))
# sup_10thpercent
ggplot(data= Gdata, aes( sup_10thpercent )  ) +
geom_histogram(col="white",
fill="blue",
binwidth = 10) +
ylab("relative frequencies") +
scale_y_continuous(labels=scales::percent) +
geom_bar()+
theme(legend.position = "none", axis.text.x  = element_text(angle=0, hjust=1, vjust=0.9))
# sup_25thpercent
ggplot(data= Gdata, aes( sup_25thpercent )  ) +
geom_histogram(col="white",
fill="blue",
binwidth = 25) +
ylab("relative frequencies") +
scale_y_continuous(labels=scales::percent) +
geom_bar()+
theme(legend.position = "none", axis.text.x  = element_text(angle=0, hjust=1, vjust=0.9))
# Periph
ggplot(data= Gdata, aes(factor(Periph), fill=factor(Periph) ) ) +
geom_bar()+
theme(legend.position = "none", axis.text.x  = element_text(angle=0, hjust=1, vjust=0.9))
Paz=590
Gdata_paz=Gdata[Patient==Paz,]
dim(Gdata_paz)
#qualche variabile:
Gdata_paz$yearofglaucoma
Gdata_paz$RimArea
Gdata_paz$Rim_Area
Gdata_paz$Rim_area
Gdata_paz$RimArea
Gdata_paz$rim_volume
#RIM
Gdata_paz$Rim_area
Gdata_paz$RimArea
Gdata_paz$rim_volume
plot(Gdata_paz$rim_volume)
plot(Gdata_paz$Age,Gdata_paz$rim_volume,type="l")
plot(Gdata_paz$Age,Gdata_paz$rim_volume,type="l")
Gdata_paz$Age
plot(Gdata_paz$Age,Gdata_paz$rim_volume)
plot(Gdata_paz$Age, Gdata_paz$rim_volume)
plot(Gdata_paz$Age, Gdata_paz$rim_volume,type="l")
# Evolution of PSD in time for a single patient
ggplot(data= Gdata_paz, aes(Age, PSD)) +
geom_line(color = "black")
Gdata_paz$Periph
tmp=Gdata[Patient==502,]
minage=min(tmp$Age)
plot(x=tmp$Age-minage, y=tmp$MD, col=502, type="l", ylim=c(-5,5))
for (i in factor(Patient))
{
tmp=Gdata[Patient==i,]
minage=min(tmp$Age)
points(x=tmp$Age-minage, y=tmp$MD, col=i, type="l")
}
tmp=Gdata[Patient==502,]
minage=min(tmp$Age)
plot(x=tmp$Age-minage, y=tmp$RNFL_average-tmp$bas, col=502, type="l", ylim=c(0,150))
for (i in factor(Patient))
{
tmp=Gdata[Patient==i,]
minage=min(tmp$Age)
points(x=tmp$Age-minage, y=tmp$RNFL_average, col=i, type="l")
}
#Plot of all th patients , RNFL
tmp=Gdata[Patient==502,]
minage=min(tmp$Age)
plot(x=tmp$Age-minage, y=tmp$RNFL_average-tmp$bas, col=502, type="l", ylim=c(0,150))
tmp$Age-minage
tmp$RNFL_average-tmp$bas
y=tmp$RNFL_average
plot(x=tmp$Age-minage, y=tmp$RNFL_average, col=502, type="l", ylim=c(0,150))
tmp=Gdata[Patient==502,]
minage=min(tmp$Age)
plot(x=tmp$Age-minage, y=tmp$RNFL_average, col=502, type="l", ylim=c(0,150))
for (i in factor(Patient))
{
tmp=Gdata[Patient==i,]
minage=min(tmp$Age)
points(x=tmp$Age-minage, y=tmp$RNFL_average, col=i, type="l")
}
tmp=Gdata[Patient==502,]
minage=min(tmp$Age)
plot(x=tmp$Age-minage, y=tmp$RNFL_average, col=502, type="l",xlim=c(0,10), ylim=c(0,150))
for (i in factor(Patient))
{
tmp=Gdata[Patient==i,]
minage=min(tmp$Age)
points(x=tmp$Age-minage, y=tmp$RNFL_average, col=i, type="l")
}
Gdata_paz$RNFL_Multi_NS
Gdata_paz$RNFL_Multi_TS
Gdata_paz$RNFL_quad_Inf
Gdata_paz$RNFL_quad_nasal
Gdata_paz$RNFL_quad_Sup
Gdata_paz$RNFL_quad_temp
Gdata_paz$RNFL_thickness_superior
Gdata_paz$RNFL_thickness_inferior
plot(cars)
plot(cars)
??car
setwd("~/Documents/universita/bayesian_statistics-Guglielmi/GLAUCOMA_PROJECT/src")
##################################################################
####################### LOADING DATA  ############################
##################################################################
Gdata=read.table("../data/data.csv", header=T,fill=T,sep=",")
dim(Gdata)
attach(Gdata)
length(unique(Patient)) # 55 pazienti
length(Patient[Patient==0]) # c'Ã¨ un' osservazione strana, probabile errore
Gdata[ Patient==0,] # quasi tutto NA -> rimuoviamola per ora
Gdata=Gdata[ Patient!=0,]
##################################################################
##################### DATA VISUALIZATION  ########################
##################################################################
library(ggplot2)
# patient
ggplot(data= Gdata, aes(factor(Patient), fill=1) ) +
geom_bar()+
theme(legend.position = "none", axis.text.x  = element_text(angle=90, hjust=1, vjust=0.9))
#numero visite per paziente:
N=mean(table(Patient))
N
quantile(table(Patient),0.25)
quantile(table(Patient),0.5)
quantile(table(Patient),0.75)
#female vs male
ggplot(data= Gdata, aes(Sex, fill=Sex  ) ) +
geom_bar()+
theme(legend.position = "none", axis.text.x  = element_text(angle=0, hjust=1, vjust=0.9))
# type of glaucoma
ggplot(data= Gdata, aes(Type_of_glaucoma, fill=Type_of_glaucoma  ) ) +
geom_bar()+
theme(legend.position = "none", axis.text.x  = element_text(angle=0.45, hjust=1, vjust=0.9))
# sup_10thpercent
ggplot(data= Gdata, aes( sup_10thpercent )  ) +
geom_histogram(col="white",
fill="blue",
binwidth = 10) +
ylab("relative frequencies") +
scale_y_continuous(labels=scales::percent) +
geom_bar()+
theme(legend.position = "none", axis.text.x  = element_text(angle=0, hjust=1, vjust=0.9))
# sup_25thpercent
ggplot(data= Gdata, aes( sup_25thpercent )  ) +
geom_histogram(col="white",
fill="blue",
binwidth = 25) +
ylab("relative frequencies") +
scale_y_continuous(labels=scales::percent) +
geom_bar()+
theme(legend.position = "none", axis.text.x  = element_text(angle=0, hjust=1, vjust=0.9))
# Periph
ggplot(data= Gdata, aes(factor(Periph), fill=factor(Periph) ) ) +
geom_bar()+
theme(legend.position = "none", axis.text.x  = element_text(angle=0, hjust=1, vjust=0.9))
###### Proviamo a visualizzare un unico paziente
Paz=590
Gdata_paz=Gdata[Patient==Paz,]
dim(Gdata_paz)
#qualche variabile:
Gdata_paz$yearofglaucoma
Gdata_paz$Color
Gdata_paz$Periph
Gdata_paz$Visit
Gdata_paz$Progression
Gdata_paz$Progression1
Gdata_paz$ProgressionStructure1
Gdata_paz$ProgressionStructure
Gdata_paz
Gdata_paz$Age # variabile tempo!
Gdata_paz$age65
Gdata_paz$visualizationofON
Gdata_paz$MAP
Gdata_paz$FieldsComment
Gdata_paz$Field2
Gdata_paz$acuity
#MODIFICHE STRUTTURALI (riguardo al nervo ottico)
#RNFL
Gdata_paz$RNFL_average
Gdata_paz$RNFL_cross_sectinal_area
Gdata_paz$RNFL_Multi_G_center
Gdata_paz$RNFL_Multi_Nasal
Gdata_paz$RNFL_Multi_Temp
Gdata_paz$RNFL_Multi_NI
Gdata_paz$RNFL_Multi_NS
Gdata_paz$RNFL_Multi_TI
Gdata_paz$RNFL_Multi_TS
Gdata_paz$RNFL_quad_Inf
Gdata_paz$RNFL_quad_nasal
Gdata_paz$RNFL_quad_Sup
Gdata_paz$RNFL_quad_temp
Gdata_paz$RNFL_thickness_superior
Gdata_paz$RNFL_thickness_inferior
Gdata_paz$RNFL_thickness_nasal
Gdata_paz$RNFL_thickness_temporal
Gdata_paz$OCT_RNFL_Signal_Strength
Gdata_paz$mean_RNFL_thickness
#RIM
Gdata_paz$Rim_area
Gdata_paz$RimArea
Gdata_paz$rim_volume
#MODIFICHE FUNZIONALI
Gdata_paz$MD# Deviazione media CAMPO VISIVO!
Gdata_paz$PSD #Pattern Standard Deviation, nel perimetro Humphrey
# Evolution of PSD in time for a single patient
ggplot(data= Gdata_paz, aes(Age, PSD)) +
geom_line(color = "black")
# Evolution of RNFL_average in time for a single patient
ggplot(data= Gdata_paz, aes(Age, RNFL_average)) +
geom_line(color = "black")
#Evaluation of MD
ggplot(data= Gdata_paz, aes(Age, MD)) +
geom_line(color = "black")
#Let's see if the progression variables ; NB: progression and progressionstructure should be absorbing
ggplot(data= Gdata_paz, aes(Age, Progression)) +
geom_line(color = "black")
ggplot(data= Gdata_paz, aes(Age, Progression1)) +
geom_line(color = "black")
ggplot(data= Gdata_paz, aes(Age, ProgressionStructure)) +
geom_line(color = "black")
ggplot(data= Gdata_paz, aes(Age), ProgressionStructure1)) +
