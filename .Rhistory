install.packages("RANN")
library(RANN)
library(geohashr)
install.packages("geohashr")
devtools::install_github("ironholds/geohash")
install.packages("devtools")
devtools::install_github("ironholds/geohash")
install.packages("geohash")
install.packages("Rcpp")
install.packages("geohash")
install.packages("R.Doy")
install.packages("geohash"
)
install.packages("geohash")
install_github('andreacirilloac/updateR')
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
library("updateR")
88.29*117324
library(ggmap)
citation("ggmap")
clear()
library('timeDate') # date and time
# general visualisation
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
library('timeDate') # date and time
install.packages("timeDate")
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
install.packages("corrplot")
library('dplyr') # data manipulation
library('readr') # input/output
install.packages("readr")
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
install.packages("tidyr")
install.packages("tidyr")
library('tidyr') # data wrangling
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
install.packages(forcats)
install.packages("forcats")
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
install.packages("ggfortify")
install.packages("ggrepel")
install.packages("treemapify")
library('treemapify') # visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation
library('ggforce') # visualisation
install.packages("ggforce")
library('broom') # data wrangling
install.packages("broom")
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
install.packages("lubridate")
library('lubridate') # date and time
library('timeDate') # date and time
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation ----- not available for my R version (3.3.3)
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
library('timeDate') # date and time
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation ----- not available for my R version (3.3.3)
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
library('timeDate') # date and time
# general visualisation
library('ggplot2') # visualisation
library('scales') # visualisation
library('grid') # visualisation
library('gridExtra') # visualisation
library('RColorBrewer') # visualisation
library('corrplot') # visualisation
# general data manipulation
library('dplyr') # data manipulation
library('readr') # input/output
library('data.table') # data manipulation
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('stringr') # string manipulation
library('forcats') # factor manipulation
# specific visualisation
library('ggfortify') # visualisation
library('ggrepel') # visualisation
library('treemapify') # visualisation ----- not available for my R version (3.3.3)
library('ggforce') # visualisation
# specific data manipulation
library('broom') # data wrangling
library('purrr') # string manipulation
# Date plus forecast
library('lubridate') # date and time
library('timeDate') # date and time
system('clang++ -v')
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M)) file.create(M)
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat("\nCC=clang", "CXX=clang++ -arch x86_64 -ftemplate-depth-256",
file = M, sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
cat(M)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
# Load the library
library(rstan)   # to interface R with STAN
knitr::opts_chunk$set(echo = FALSE)
## define base for the graphs and store in object 'p'
p6 <- ggplot(data = Gdata[!is.na(Rim_area) & !is.na(RNFL_average),], aes(x = Rim_area, y = RNFL_average, color= factor(Patient) )  )
library(ggplot2)
## define base for the graphs and store in object 'p'
p5 <- ggplot(data = Gdata[!is.na(PSD) & !is.na(RNFL_average),], aes(x = PSD, y = RNFL_average,  color= factor(Patient) )  )
knitr::opts_chunk$set(echo = FALSE)
setwd("~/Documents/universita/bayesian_statistics-Guglielmi/GLAUCOMA_PROJECT/src/analisi_exp_markdown/")
Gdata=read.table("../../data/data.csv", header=T,fill=T,sep=",")
rm(list=ls())
setwd("~/Documents/universita/bayesian_statistics-Guglielmi/GLAUCOMA_PROJECT/src")
load("../R_object/Glaucoma_better_data.RData")
attach(mydata)
################JAGGAMENTO#######################
library(rjags)
kk=rep(0,length(unique(Patient)))
kk[1]=0
for (i in 2:length(unique(Patient))){
kk[i]=kk[i-1]+numerosity[i-1]
}
library(rjags)
# Compute useful values
numerosity<-as.integer(table(Patient))
kk=rep(0,length(unique(Patient)))
kk[1]=0
for (i in 2:length(unique(Patient))){
kk[i]=kk[i-1]+numerosity[i-1]
}
names(mydata)
IOP
Weight
Height
Weight/Height
age65
rep(1,length(Patient))
#covariates with fixed coefficents
X=cbind(Asian,               #beta1
Black,               #beta2
Hispanic,            #beta3
White,               #beta4
familiarity_yes,     #beta5
Sex,                 #beta6
POAG,                #beta7
Hypertension,        #beta8
HyperLipidemia,      #beta9
Diabetes,            #beta10
Cardiovascular_Dz,   #beta11
Smoking,             #beta12
yearofglaucoma,      #beta13
age65                #beta14
)
#covariates with random coefficents
Z=cbind(rep(1,length(Patient)),  #b1 (random intercept)
IOP,                     #b2
acuity,                  #b3
MD,                      #b4
PSD,                     #b5
trusopt,                 #b6
prostaglandin,           #b7
brimonidine,             #b8
timolol,                 #b9
htnmed,                  #b10
cup_disk_horiz_ratio,    #b11
cup_disk_vert_ratio,     #b12
linear_cup_disc_ratio,   #b13
macular_volume,          #b14
Vert_integrated_rim_area__vol_,     #b15
Horz_integrated_rim_width__area_,   #b16
Cup_area,Rim_area,       #b17
cup_disk_area_ratio,     #b18
cup_disk_horiz_ratio,    #b19
cup_disk_vert_ratio      #b20
)
dim(X)[2]
beta= rep(0,dim(X)[2])
beta
#fixed coefficients initialization:
beta= rep(0,dim(X)[2])
#random coefficients initialization:
b= matrix(0,nrow=dim(Z)[2], ncol=length(unique(Patient)))
b
# Hyperparameters:
mu0=rep(0, dim(X)[2])
mu0
S0=diag(rep(1000, dim(X)[2]))
S0
# Compute useful values
numerosity<-as.integer(table(Patient))
kk=rep(0,length(unique(Patient)))
kk[1]=0
for (i in 2:length(unique(Patient))){
kk[i]=kk[i-1]+numerosity[i-1]
}
#covariates with fixed coefficents
X=cbind(Asian,               #beta1
Black,               #beta2
Hispanic,            #beta3
White,               #beta4
familiarity_yes,     #beta5
Sex,                 #beta6
POAG,                #beta7
Hypertension,        #beta8
HyperLipidemia,      #beta9
Diabetes,            #beta10
Cardiovascular_Dz,   #beta11
Smoking,             #beta12
yearofglaucoma,      #beta13
age65                #beta14
)
#covariates with random coefficents
Z=cbind(rep(1,length(Patient)),  #b1 (random intercept)
IOP,                     #b2
acuity,                  #b3
MD,                      #b4
PSD,                     #b5
trusopt,                 #b6
prostaglandin,           #b7
brimonidine,             #b8
timolol,                 #b9
htnmed,                  #b10
cup_disk_horiz_ratio,    #b11
cup_disk_vert_ratio,     #b12
linear_cup_disc_ratio,   #b13
macular_volume,          #b14
Vert_integrated_rim_area__vol_,     #b15
Horz_integrated_rim_width__area_,   #b16
Cup_area,                #b17
Rim_area,                #b18
cup_disk_area_ratio,     #b19
cup_disk_horiz_ratio,    #b20
cup_disk_vert_ratio      #b21
)
# Hyperparameters:
mu0=rep(0, dim(X)[2])
S0=diag(rep(1000, dim(X)[2])) #to be changed
b0=rep(0,dim(Z)[2])
R=diag(rep(1, dim(Z)[2])) #to be changed
p=100 #to be changed
data=list( y=RNFL_average, X=X, Z=Z, npat= length(unique(Patient)), nrow_b=dim(Z)[2],
mu0=mu0, S0=S0, b0=b0, R=R, p=p, numerosity = numerosity, kk=kk)      # dati che passo a jags
#fixed coefficients initialization:
beta= rep(0,dim(X)[2])
#random coefficients initialization (row_i= coefficients b_i):
b= matrix(0,nrow=dim(Z)[2], ncol=length(unique(Patient)))
invD=p*solve(R)
inits = function() {list( beta=beta, b=b, invD=invD sigma0=50)}
inits = function() {list( beta=beta, b=b, invD=invD, sigma0=50)}
modelRegress=jags.model("data4.bug",data=data,inits=inits,n.adapt=1000,n.chains=1)
modelRegress=jags.model("data4.bug",data=data,inits=inits,n.adapt=1000,n.chains=1)
X
modelRegress=jags.model("data4.bug",data=data,inits=inits,n.adapt=1000,n.chains=1)
X[,13]
Asian
#covariates with fixed coefficents
X=cbind(Asian,               #beta1
Black,               #beta2
Hispanic,            #beta3
White,               #beta4
familiarity_yes,     #beta5
Sex,                 #beta6
POAG,                #beta7
Hypertension,        #beta8
HyperLipidemia,      #beta9
Diabetes,            #beta10
Cardiovascular_Dz,   #beta11
Smoking,             #beta12
yearofglaucoma,      #beta13
age65                #beta14
)
age65
IOP
acuity
MD
PSD
trusopt
prostaglandin
brimonidine
timolol
htnmed
cup_disk_horiz_ratio
cup_disk_vert_ratio
htnmed
cup_disk_horiz_ratio
cup_disk_vert_ratio
linear_cup_disc_ratio
macular_volume
Vert_integrated_rim_area__vol_
Horz_integrated_rim_width__area_
cup_disk_horiz_ratio
cup_disk_vert_ratio
linear_cup_disc_ratio
macular_volume
macular_volume
Vert_integrated_rim_area__vol_
Horz_integrated_rim_width__area_
Cup_area
Rim_area
Cup_area
cup_disk_area_ratio
cup_disk_horiz_ratio
cup_disk_area_ratio
cup_disk_vert_ratio
PSD
MD
acuity
IOP
#covariates with fixed coefficents
X=cbind(Asian,               #beta1
Black,               #beta2
Hispanic,            #beta3
White,               #beta4
familiarity_yes,     #beta5
Sex,                 #beta6
POAG,                #beta7
Hypertension,        #beta8
HyperLipidemia,      #beta9
Diabetes,            #beta10
Cardiovascular_Dz,   #beta11
Smoking,             #beta12
yearofglaucoma,      #beta13
age65                #beta14
)
#covariates with random coefficents
Z=cbind(rep(1,length(Patient)),  #b1 (random intercept)
IOP,                     #b2 !
acuity,                  #b3 !
MD,                      #b4 !
PSD,                     #b5 !
trusopt,                 #b6
prostaglandin,           #b7
brimonidine,             #b8
timolol,                 #b9
htnmed,                  #b10
cup_disk_horiz_ratio,    #b11 !
cup_disk_vert_ratio,     #b12 !
macular_volume,          #b13 !
Vert_integrated_rim_area__vol_,     #b14 !
Horz_integrated_rim_width__area_,   #b15 !
Cup_area,                #b16   !
Rim_area,                #b17
cup_disk_area_ratio,     #b18 !
cup_disk_horiz_ratio,    #b19 !
cup_disk_vert_ratio      #b20 !
)
# Hyperparameters:
mu0=rep(0, dim(X)[2])
S0=diag(rep(1000, dim(X)[2])) #to be changed
b0=rep(0,dim(Z)[2])
R=diag(rep(1, dim(Z)[2])) #to be changed
p=100 #to be changed
data=list( y=RNFL_average, X=X, Z=Z, npat= length(unique(Patient)), nrow_b=dim(Z)[2],
mu0=mu0, S0=S0, b0=b0, R=R, p=p, numerosity = numerosity, kk=kk)      # dati che passo a jags
#fixed coefficients initialization:
beta= rep(0,dim(X)[2])
#random coefficients initialization (row_i= coefficients b_i):
b= matrix(0,nrow=dim(Z)[2], ncol=length(unique(Patient)))
invD=p*solve(R)
inits = function() {list( beta=beta, b=b, invD=invD, sigma0=50)}
modelRegress=jags.model("data4.bug",data=data,inits=inits,n.adapt=1000,n.chains=1)
rm(list=ls())
