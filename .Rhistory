tmp = factor(Gdata_6vis$Sex, levels=c("Male","Female"), labels=c(1,0))
Gdata_6vis$Sex=as.numeric(as.character(tmp))
rm(tmp)
Gdata_6vis$Sex
Sex
attach(Gdata_6vis)
Gdata_6vis$
detach(Gdata_6vis)
detach(Gdata_6vis)
attach(Gdata_6vis)
detach(Gdata_6vis)
Sex
attach(Gdata_6vis)
Sex
Race
Asian=(Race=="Asian")
Asian
Asian=(Race=="Asian")*1
Asian
White=(Race=="White")*1
White
Race
Asian=(Race=="Asian")*1
Black=(Race=="Black")*1
Hispanic=(Race=="Hispanic")*1
White=(Race=="White")*1
Asian
Black
Hispanic
White
attach(Gdata_6vis)
type_of_glaucoma
Type_of_glaucoma
POAG=(Type_of_glaucoma=="POAG")*1
detach(Gdata_6vis)
POAG
attach(Gdata_6vis)
Allergies
unique(Allergies)
detach(Gdata_6vis)
Hypertension
detach(Gdata_6vis)
Hypertension
Hypertension
#  Modify Hypertension: Yes=1, No=0
tmp = factor(Gdata_6vis$Hypertension, levels=c("Yes","No"), labels=c(1,0))
Gdata_6vis$Hypertension=as.numeric(as.character(tmp))
rm(tmp)
Gdata_6vis$Hypertension
HyperLipidemia
attach(Gdata_6vis)
HyperLipidemia
tmp = factor(Gdata_6vis$HyperLipidemia, levels=c("Yes","No"), labels=c(1,0))
Gdata_6vis$HyperLipidemia=as.numeric(as.character(tmp))
rm(tmp)
Gdata_6vis$HyperLipidemia
attach(Gdata_6vis)
Diabetes
Gdata_6vis$Diabetes=as.numeric(as.character(factor(Gdata_6vis$Diabetes, levels=c("Yes","No"), labels=c(1,0))))
Gdata_6vis$Diabetes
Cardiovascular_Dz
#  Modify Cardiovascular_Dz: Yes=1, No=0  (now in one row)
Gdata_6vis$Cardiovascular_Dz=as.numeric(as.character(factor(Gdata_6vis$Cardiovascular_Dz, levels=c("Yes","No"), labels=c(1,0))))
Gdata_6vis$Cardiovascular_Dz
Other_systemic_dz_1
#  Other_systemic_dz_1: trascuriamolo per ora
unique(Gdata_6vis$Other_systemic_dz_1)
family_history
Smoking
familiarity_yes=(family_history==yes)*1
familiarity_yes=(family_history=="yes")*1
familiarity_yes
# Smoking
Gdata_6vis$Smoking=as.numeric(as.character(factor(Gdata_6vis$Smoking, levels=c("Yes","No"), labels=c(1,0))))
Gdata_6vis$Smoking
Meds_according_to_Pt
Ocular_Meds_according_to_Pt
Meds_according_to_Pt_bool=(Meds_according_to_Pt==""|Meds_according_to_Pt=="none" )*1
Meds_according_to_Pt_bool
(1==1|2==1)
(1.2==1|2==1)
(1.2==1||2==1)
attach(Gdata_6vis)
Ocular_Meds_according_to_Pt_bool=(Ocular_Meds_according_to_Pt==""|Ocular_Meds_according_to_Pt=="none" )*1
Ocular_Meds_according_to_Pt_bool
detach(Gdata_6vis)
Comments
#Ocular_Meds_according_to_Pt: many different; for the moment 1=" ocular medicine yes", 0="ocul. medicine no"
attach(Gdata_6vis)
trusoptBase
prostaglandinBase
brimonidineBase
timololBase
Baseline HTN meds
Baseline HTN meds
htnmedBase
Gen_Health
Gen_Vision
Oc_Pain
Near
Distance
Driving
Color
Total_Avg
pascal_IOP
IOP
OPA
quality_control
CS_3_cpd
CCT
Weight
auto_sphere
cornealcurve
spectacle_sph
Medication_changes_
Added_Med_1Ã¹
Added_Med_1
Added_Med_2
PressuresComments
visit2
OAsys
OAdys
OAri
a
#Ocular_Meds_according_to_Pt: many different; for the moment 1=" ocular medicine yes", 0="ocul. medicine no"
attach(Gdata_6vis)
a
Gdata_6vis$acuity
PressuresComments
CDIcomments
sup_zero
sup_90thpercent
sup_meanflow
false_positive
plot(mean_RNFL_thickness,RNFL_average)
plot(mean_RNFL_thickness,RNFL_average)
plot(mean_RNFL_thickness,RNFL_average, xlim=c(-0.5,0.5))
plot(mean_RNFL_thickness,RNFL_average, xlim=c(-0.2,0.5))
plot(mean_RNFL_thickness,RNFL_average, xlim=c(-0.2,0.5),ylim=c(0,150))
hist(mean_RNFL_thickness)
false_positive
plot(mean_RNFL_thickness,inf_meanflow, xlim=c(-0.2,0.5))
plot(mean_RNFL_thickness,false_positive, xlim=c(-0.2,0.5))
plot(mean_RNFL_thickness,AGIS_score, xlim=c(-0.2,0.5))
AGIS_score
Plot(AGIS_score)
plot(AGIS_score)
GHT
GHT
plot(mean_RNFL_thickness,GHT, xlim=c(-0.2,0.5))
Use_this_value_
plot(visit2,mean_RNFL_thickness, xlim=c(-0.2,0.5))
visit2
plot(visit2,mean_RNFL_thickness)
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis[!is.na(RNFL_average),], aes(x = visit2, y = mean_RNFL_thickness,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black")
library(ggplot2)
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis[!is.na(RNFL_average),], aes(x = visit2, y = mean_RNFL_thickness,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black")
Use_this_value_
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis[Use_this_value_=="Yes",], aes(x = visit2, y = mean_RNFL_thickness,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black")
min(mean_RNFL_thickness)
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis[Use_this_value_=="Yes"& mean_RNFL_thickness>0,], aes(x = visit2, y = mean_RNFL_thickness,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black")
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis[Use_this_value_=="Yes"& mean_RNFL_thickness>0,], aes(x = visit2, y = RNFL_average,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black")
Use_this_value_
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis[Use_this_value_==""& mean_RNFL_thickness>0,], aes(x = visit2, y = mean_RNFL_thickness,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black")
FieldsComment
fixationloss
Disk_area
plot(RNFL_average,(RNFL_thickness_inferior+RNFL_thickness_nasal+RNFL_thickness_superior+RNFL_thickness_temporal)/4)
plot(RNFL_average,RNFL_thickness_temporal)
plot(visit2,RNFL_thickness_temporal)
plot(visit2,RNFL_thickness_nasal)
plot(visit2,RNFL_thickness_superior)
plot(visit2,RNFL_thickness_inferior)
OCT_Disc_Signal_Strength
OCT_RNFL_Signal_Strength
plot(OCT_RNFL_Signal_Strength,RNFL_average)
macular_thickness_outer_superior
plot(center,RNFL_average)
plot(macular_thickness_outer_superior,RNFL_average)
plot(macular_volume,RNFL_average)
plot(mean_RNFL_thickness,RNFL_average)
plot(mean_RNFL_thickness,visit2)
plot(visit2,linear_cup_disc_ratio)
trusopt
unique(trusopt)
prostaglandin
brimonidine
Meds_according_to_Pt
unique(Meds_according_to_Pt)
unique(Ocular_Meds_according_to_Pt)
timolol
htnmed
BaselineMD
MD
ProgressionStructure
Plot(visit2,ProgressionStructure)
plot(visit2,ProgressionStructure)
plot(visit2,ProgressionStructure1)
plot(visit2,cup_disk_horiz_ratio)
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis, aes(x = visit2, y = cup_disk_horiz_ratio,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black")
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis, aes(x = visit2, y = cup_disk_vert_ratio,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black")
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis, aes(x = visit2, y = linear_cup_disc_ratio,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black")
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis, aes(x = visit2, y = horz_integrated_rim_width_area,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black")
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis, aes(x = visit2, y = Horz_integrated_rim_width__area_,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black")
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis, aes(x = visit2, y = cup_disk_horiz_ratio,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black")
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis, aes(x = visit2, y = RNFL_average,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black")
plot(RNFL, cup_disk_horiz_ratio)
plot(RNFL_average, cup_disk_horiz_ratio)
BaselineRNFL1=rep(0,1050)
for (i in 1:1050)
{
if (visit2==0)
{
tmp=RNFL_average[i]
}
BaselineRNFL1[i]=tmp
}
BaselineRNFL1=rep(0,1050)
for (i in 1:1050)
{
if (visit2[i]==0)
{
tmp=RNFL_average[i]
}
BaselineRNFL1[i]=tmp
}
plot(BaselineRNFL1)
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis, aes(x = visit2, y = RNFL_average-BaselineRNFL1,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black")
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis, aes(x = visit2, y = (RNFL_average-BaselineRNFL1)/BaselineRNFL1,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black")
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black") +
geom_hline(yintercept = -0.08)
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis[RNFL_average<0.75,], aes(x = visit2, y = (RNFL_average-BaselineRNFL1)/BaselineRNFL1,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black") +
geom_hline(yintercept = -0.08)
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis[(RNFL_average-BaselineRNFL1)/BaselineRNFL1<0.75,], aes(x = visit2, y = (RNFL_average-BaselineRNFL1)/BaselineRNFL1,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black") +
geom_hline(yintercept = -0.08)
detach(Gdata_6vis)
BaselineRNFL1
RNFL_average
RNFL_average
RNFL_average
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis[(RNFL_average-BaselineRNFL1)/BaselineRNFL1<0.75,], aes(x = visit2, y = (RNFL_average-BaselineRNFL1)/BaselineRNFL1,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black") +
geom_hline(yintercept = -0.08)
Gdata_6vis[(RNFL_average-BaselineRNFL1)/BaselineRNFL1<0.75,]
(RNFL_average-BaselineRNFL1)/BaselineRNFL1<0.75
## define base for the graphs and store in object 'p'
p <- ggplot(data = Gdata_6vis[(RNFL_average-BaselineRNFL1)/BaselineRNFL1<0.75,], aes(x = visit2, y = (RNFL_average-BaselineRNFL1)/BaselineRNFL1,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black") +
geom_hline(yintercept = -0.08)
p + geom_line() + geom_point()
tmp=Gdata_6vis
tmp=tmp[(RNFL_average-BaselineRNFL1)/BaselineRNFL1<0.75]
tmp=tmp[(RNFL_average-BaselineRNFL1)/BaselineRNFL1<0.75,]
tmp=Gdata_6vis
tmp=cbind(tmp, BaselineRNFL1)
tmp=tmp[(RNFL_average-BaselineRNFL1)/BaselineRNFL1<0.75,]
tmp$BaselineRNFL1
## define base for the graphs and store in object 'p'
p <- ggplot(data = tmp, aes(x = tmp$visit2, y = (tmp$RNFL_average-tmp$BaselineRNFL1)/tmp$BaselineRNFL1,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black") +
geom_hline(yintercept = -0.08)
rm(list=ls())
mydata=read.table("../data/data.csv", header=T,fill=T,sep=",")
mydata=read.csv("../data/data.csv", header=T,fill=T,sep=",")
rm(list=ls())
mydata=read.csv("../data/data.csv", header=T,fill=T,sep=",")
# Consider only patients with at least 6 visits:
tmp=unique(mydata$Patient)
a<-table(mydata$Patient)
tmp_data=tmp[which(a>=6)]
mydata=mydata[mydata$Patient %in% tmp_data,]
rm(tmp)
rm(tmp_data)
rm(a)
# Modify Sex covariate: Male=1, Female=0
tmp = factor(mydata$Sex, levels=c("Male","Female"), labels=c(1,0))
mydata$Sex=as.numeric(as.character(tmp))
rm(tmp)
mydata$Sex
Asian=(Race=="Asian")*1
Black=(Race=="Black")*1
Hispanic=(Race=="Hispanic")*1
White=(Race=="White")*1
setwd("~/Documents/universita/bayesian_statistics-Guglielmi/GLAUCOMA_PROJECT/src")
rm(list=ls())
mydata=read.csv("../data/data.csv", header=T,fill=T,sep=",")
attach(mydata)
detach(mydata)
Patient
# Consider only patients with at least 6 visits:
tmp=unique(mydata$Patient)
a<-table(mydata$Patient)
tmp_data=tmp[which(a>=6)]
mydata=mydata[mydata$Patient %in% tmp_data,]
rm(tmp)
rm(tmp_data)
rm(a)
# Modify Sex covariate: Male=1, Female=0
tmp = factor(mydata$Sex, levels=c("Male","Female"), labels=c(1,0))
mydata$Sex=as.numeric(as.character(tmp))
rm(tmp)
mydata$Sex
attach(mydata)
Asian=(Race=="Asian")*1
Black=(Race=="Black")*1
Hispanic=(Race=="Hispanic")*1
White=(Race=="White")*1
detach(mydata)
mydata=cbind(mydata,Asian,Black,Hispanic,White)
mydata$Asian
attach(mydata)
POAG=(Type_of_glaucoma=="POAG")*1
detach(mydata)
mydata=cbind(mydata,POAG)
mydata$POAG
tmp = factor(mydata$Hypertension, levels=c("Yes","No"), labels=c(1,0))
mydata$Hypertension=as.numeric(as.character(tmp))
rm(tmp)
mydata$Hypertension
Hypertension
tmp = factor(mydata$HyperLipidemia, levels=c("Yes","No"), labels=c(1,0))
mydata$HyperLipidemia=as.numeric(as.character(tmp))
rm(tmp)
mydata$HyperLipidemia
mydata$Diabetes=as.numeric(as.character(factor(mydata$Diabetes, levels=c("Yes","No"), labels=c(1,0))))
mydata$Diabetes
mydata$Cardiovascular_Dz=as.numeric(as.character(factor(mydata$Cardiovascular_Dz, levels=c("Yes","No"), labels=c(1,0))))
mydata$Cardiovascular_Dz
# family history: since there are many NA, we made a vector with  1=yes, 0  otherwise
attach(mydata)
familiarity_yes=(family_history=="yes")*1
familiarity_yes
detach(mydata)
mydata=cbind(mydata,familiarity_yes)
mydata$familiarity_yes
# Smoking: Yes=1, No=0
mydata$Smoking=as.numeric(as.character(factor(mydata$Smoking, levels=c("Yes","No"), labels=c(1,0))))
mydata$Smoking
attach(mydata)
Meds_according_to_Pt_bool=(Meds_according_to_Pt==""|Meds_according_to_Pt=="none" )*1
Meds_according_to_Pt_bool
detach(mydata)
mydata=cbind(mydata,Meds_according_to_Pt_bool)
mydata$Meds_according_to_Pt_bool
attach(mydata)
Ocular_Meds_according_to_Pt_bool=(Ocular_Meds_according_to_Pt==""|Ocular_Meds_according_to_Pt=="none" )*1
Ocular_Meds_according_to_Pt_bool
detach(mydata)
mydata=cbind(mydata,Ocular_Meds_according_to_Pt_bool)
mydata$Ocular_Meds_according_to_Pt_bool
# BASELINE RNFL (RNFL AT FIRST VISIT)
attach(mydata)
BaselineRNFL1=rep(0,1050)
for (i in 1:dim(mydata)[1])
{
if (visit2[i]==0)
{
tmp=RNFL_average[i]
}
BaselineRNFL1[i]=tmp
}
detach(mydata)
mydata=cbind(mydata,BaselineRNFL1)
mydata$BaselineRNFL1
#prova:
na.approx(c(1,NA,12,3,NA,NA))
library(zoo)
#prova:
na.approx(c(1,NA,12,3,NA,NA))
#prova:
na.approx(c(NA,1,NA,12,3,NA,NA))
#prova:
na.approx(c(NA,1,NA,12,3,NA,76,NA,NA))
#prova:
na.approx(c(NA,1,NA,12,3,NA,76,NA,NA),na.rm=FALSE)
#prova:
tmp=na.approx(c(NA,1,NA,12,3,NA,76,NA,NA),na.rm=FALSE)
tmp
na.fill(tmp)
na.fill(tmp,"extend")
# paziente "strano":
mydata$mean_RNFL_thickness[which(mydata$Patient==582)]
# paziente "strano":
mydata$RNFL_average[which(mydata$Patient==582)]
#prova:
tmp=na.approx(c(NA,1,NA,12,3,NA,76,NA,NA),na.rm=FALSE)
tmp
na.fill(tmp,"extend")
rm(tmp)
# riempi NA di RNFL_AVERAGE RIM_AREA
numerosity=table(mydata$Patient)
kk=0
numerosity=table(mydata$Patient)
kk=0
for(i in 1:length(unique(mydata$Patient))){
mydata$RNFL_average[(kk+1):(kk+numerosity[i])]=na.approx(mydata$RNFL_average[(kk+1):(kk+numerosity[i])],na.rm=FALSE)
mydata$RNFL_average[(kk+1):(kk+numerosity[i])]=na.fill(mydata$RNFL_average[(kk+1):(kk+numerosity[i])],"extend")
mydata$Rim_area[(kk+1):(kk+numerosity[i])]=na.approx(mydata$Rim_area[(kk+1):(kk+numerosity[i])],na.rm=FALSE)
mydata$Rim_area[(kk+1):(kk+numerosity[i])]=na.fill(mydata$Rim_area[(kk+1):(kk+numerosity[i])],"extend")
kk=kk+numerosity[i]
}
mydata$RNFL_average
mydata$Rim_area
Rim_area
p <- ggplot(data = mydata, aes(x = visit2, y = (RNFL_average-BaselineRNFL1)/BaselineRNFL1,  color= factor(Patient) )  )
library(ggplot2)
p <- ggplot(data = mydata, aes(x = visit2, y = (RNFL_average-BaselineRNFL1)/BaselineRNFL1,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black") +
geom_hline(yintercept = -0.08)
#evidentemente c'Ã¨ un paziente "anomalo";
max(mydata$RNFL_average)
p <- ggplot(data = mydata, aes(x = visit2, y = RNFL_average,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black") +
geom_hline(yintercept = -0.08)
p <- ggplot(data = mydata, aes(x = visit2, y = (RNFL_average-BaselineRNFL1)/BaselineRNFL1,  color= factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black") +
geom_hline(yintercept = -0.08)
#evidentemente c'Ã¨ un paziente "anomalo";
max(mydata$RNFL_average)
#evidentemente c'Ã¨ un paziente "anomalo";
max((RNFL_average-BaselineRNFL1)/BaselineRNFL1)
#evidentemente c'Ã¨ un paziente "anomalo";
max((mydata$RNFL_average-mydata$BaselineRNFL1)/mydata$BaselineRNFL1)
#evidentemente c'Ã¨ un paziente "anomalo";
Patient[(mydata$RNFL_average-mydata$BaselineRNFL1)/mydata$BaselineRNFL1==max((mydata$RNFL_average-mydata$BaselineRNFL1)/mydata$BaselineRNFL1)]
#evidentemente c'Ã¨ un paziente "anomalo";
mydata$Patient[(mydata$RNFL_average-mydata$BaselineRNFL1)/mydata$BaselineRNFL1==max((mydata$RNFL_average-mydata$BaselineRNFL1)/mydata$BaselineRNFL1)]
p <- ggplot(data = mydata, aes(x = visit2, y = (RNFL_average-BaselineRNFL1)/BaselineRNFL1,  Patient )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black") +
geom_hline(yintercept = -0.08)
p <- ggplot(data = mydata, aes(x = visit2, y = (RNFL_average-BaselineRNFL1)/BaselineRNFL1,  color=Patient )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black") +
geom_hline(yintercept = -0.08)
p <- ggplot(data = mydata, aes(x = visit2, y = (RNFL_average-BaselineRNFL1)/BaselineRNFL1,  color=factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black") +
geom_hline(yintercept = -0.08)
unique(Patient)
unique(mydata$Patient)
mydata[mydata$PAtient==501]
mydata[mydata$Patient==501]
mydata[mydata$Patient==501,]
#evidentemente c'Ã¨ un paziente "anomalo";
mydata$Patient[(mydata$RNFL_average-mydata$BaselineRNFL1)/mydata$BaselineRNFL1==max((mydata$RNFL_average-mydata$BaselineRNFL1)/mydata$BaselineRNFL1)]
#eliminiamo il paziente 501 per ora:
mydata=mydata[mydata$Patient!=501,]
p <- ggplot(data = mydata, aes(x = visit2, y = (RNFL_average-BaselineRNFL1)/BaselineRNFL1,  color=factor(Patient) )  )
p + geom_line() + geom_point() +
geom_smooth(method = lm, color="black") +
geom_hline(yintercept = -0.08)
save(mydata, file="../R_object/Glaucoma_better_data.RData")
